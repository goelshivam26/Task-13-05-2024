#include <bits/stdc++.h>
using namespace std;

//Solar panel class
class SolarPanels {
    int solar_energy;
public:
    SolarPanels(int energy) : solar_energy(energy) {}

    //Getter Method
    int get_solar_energy() {
        return solar_energy;
    }
};

//base class for all inverters
class Inverter {
protected:
    int current;
    int operating_voltage;
    int power_rating;

public:

   //parametrised constructor
    Inverter(int current, int operating_voltage) : power_rating(current*operating_voltage) {}
    virtual int calculate_power() = 0;
};

//child class of inverter class
class SolarInverter : public Inverter {
protected:
    bool has_battery;
    SolarPanels* solar_panels;

public:
    SolarInverter(int current, int operating_voltage , bool battery) : Inverter(current,operating_voltage), has_battery(battery), solar_panels(nullptr) {}

    void connect_solar_panels(SolarPanels* panels) {
        solar_panels = panels;
    }
   
   //override (polymorphism)
    virtual int calculate_power() override {
        if (solar_panels) {
            return power_rating * solar_panels->get_solar_energy();
        } else {
            return 0;
        }
    }
};

//child class of inverter class
class NonSolarInverter : public Inverter {
protected:
    bool has_battery;

public:
    NonSolarInverter(int current, int operating_voltage, bool battery = true) : Inverter(current,operating_voltage), has_battery(battery) {}

    virtual int calculate_power() override {
        return power_rating;
    }
};

class GridOn {};

class PCU : public SolarInverter {
    GridOn* grid_on;

public:
    PCU(int current, int operating_voltage) : SolarInverter(current, operating_voltage, true), grid_on(nullptr) {}

    void set_grid_on(GridOn* grid) {
        grid_on = grid;
    }
};

class GTI : public SolarInverter {
    GridOn grid_on;

public:
    GTI(int current, int operating_voltage) : SolarInverter(current, operating_voltage, false) {}

    virtual int calculate_power() override {
        if (solar_panels && &grid_on) {
            return SolarInverter::calculate_power(); // Power from solar panels only
        } else {
            return 0;
        }
    }
};

class Regalia : public SolarInverter {
    GridOn grid_on;

public:
    Regalia(int current, int operating_voltage) : SolarInverter(current, operating_voltage, true) {}
};

class Cruze : public NonSolarInverter {
public:
    Cruze(int current, int operating_voltage) : NonSolarInverter(current,operating_voltage) {}

    virtual int calculate_power() override {
        return power_rating;
    }
};

class Zelio : public NonSolarInverter {
public:
    Zelio(int current, int operating_voltage) : NonSolarInverter(current,operating_voltage) {}

    virtual int calculate_power() override {
        return power_rating;
    }
};

int main() {
    SolarPanels solar_panels(1000);

    PCU pcu(100,200);
    pcu.connect_solar_panels(&solar_panels);

    GridOn grid;
    pcu.set_grid_on(&grid);

    GTI gti(120,290);
    gti.connect_solar_panels(&solar_panels);

    Regalia regalia(100,210);
    regalia.connect_solar_panels(&solar_panels);

    Cruze cruze(210,20);
    Zelio zelio(220,220);

    std::cout << "PCU Power: " << pcu.calculate_power() << std::endl;
    std::cout << "GTI Power: " << gti.calculate_power() << std::endl;
    std::cout << "Regalia Power: " << regalia.calculate_power() << std::endl;
    std::cout << "Cruze Power: " << cruze.calculate_power() << std::endl;
    std::cout << "Zelio Power: " << zelio.calculate_power() << std::endl;

    return 0;
}




